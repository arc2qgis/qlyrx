# -*- coding: utf-8 -*-
"""
/***************************************************************************
 qlyrx
                                 A QGIS plugin
 Apply Arcgis Pro .lyrx style
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-04-09
        git sha              : $Format:%H$
        copyright            : (C) 2019 by arc2qgis
        email                : dror.bogin@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QPointF
from PyQt5.QtGui import QIcon, QColor, QFont
from PyQt5.QtWidgets import QAction, QFileDialog, QHBoxLayout, QLabel, QComboBox, QDialog
from qgis.core import (QgsProject, QgsWkbTypes, QgsColorRampShader, QgsPresetSchemeColorRamp, QgsRasterShader, QgsRasterBandStats, 
                        QgsSymbol, QgsSingleSymbolRenderer,QgsSingleBandPseudoColorRenderer, QgsSimpleLineSymbolLayer, 
                        QgsLinePatternFillSymbolLayer, QgsFontMarkerSymbolLayer, QgsSettings,
                        QgsPointPatternFillSymbolLayer, QgsMarkerLineSymbolLayer, QgsMarkerSymbol, 
                        QgsSimpleMarkerSymbolLayerBase, QgsSimpleMarkerSymbolLayer, QgsSVGFillSymbolLayer, 
                        QgsPalLayerSettings, QgsTextFormat, QgsVectorLayerSimpleLabeling, QgsRendererCategory, QgsCategorizedSymbolRenderer)
from qgis.utils import *
import json
import re


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .qlyrx_dialog import qlyrxDialog
from .qlyrx_styler import qlyrxStyler
import os
import os.path





class qlyrx:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.mb = self.iface.messageBar()
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        self.j_data = None
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'qlyrx_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)
        
        self.dlg = qlyrxDialog()
        self.styler = qlyrxStyler()
        
        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&qlyrx')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None


    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('qlyrx', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        lyrx_icon_path = ':/plugins/qlyrx/icon_lyrx.png'
        self.add_action(
            lyrx_icon_path,
            text=self.tr(u'Apply lyrx symbology'),
            callback=self.run,
            parent=self.iface.mainWindow())

        qml_icon_path = ':/plugins/qlyrx/icon_qml.png'
        LoadStyleAction = QAction('Load Style From QML/SLD')
        LoadStyleAction.setIcon(QIcon(qml_icon_path))
        LoadStyleAction.triggered.connect(self.LoadStyle)
        self.add_action(
            qml_icon_path,
            text=self.tr(u'Load Style From QML/SLD'),
            callback=self.LoadStyle,
            parent=self.iface.mainWindow())
        #self.iface.addCustomActionForLayerType(LoadStyleAction,'',qgis.core.QgsMapLayerType(0),True)
        # will be set False in run()
        self.first_start = True
        

    def LoadStyle(self):
        """
        Adding a context menu option to apply previously saved QML\SLD styles
        """
        layer = self.iface.activeLayer()
        self.fd = QFileDialog()
        self.fd.show()
        self.fd.setFileMode(QFileDialog.ExistingFile)
        self.fd.setNameFilter("QGIS Layer Style File, SLD File (*.qml *.sld )")
        if self.fd.exec_() == QDialog.Accepted:
            file = str(self.fd.selectedFiles()[0])
            if file.endswith('sld'):
                layer.loadSldStyle(file)
            elif file.endswith('qml'):
                layer.loadNamedStyle(file)
            layer.triggerRepaint()


    def load_vectors(self):
        """
        Populate the layer selection with vector layers only
        """
        self.dlg.layer_select.clear()
        # Filter vector layers
        layers = [layer for layer in QgsProject.instance().mapLayers().values() if layer.type() == 0]
        vector_layers = []
        for layer in layers:
            #if layer.type() ==  QgsMapLayer.VectorLayer:
            vector_layers.append(layer.name())
        self.dlg.layer_select.addItems(vector_layers)

    
    def enableQmlSaving(self):
        if self.dlg.saveQmlCheck.isChecked():
            self.dlg.QMLSaveLocation.setEnabled(True)
            self.dlg.qmlLabel.setEnabled(True)
        else:
            self.dlg.QMLSaveLocation.setDisabled(True)
            self.dlg.qmlLabel.setDisabled(True)

    
    def saveQML(self,layer):
        try:
            if(len(self.dlg.QMLSaveLocation.filePath())) > 0:
                QmlPath = self.dlg.QMLSaveLocation.filePath()
                layer.saveNamedStyle(QmlPath)
            else:
                self.mb.pushWarning('QML Not Saved','missing Path')
        except Exception as e:
            self.mb.pushCritical('Error',"Something went wrong with saving the QML, please send us the following error: {}".format(e))


    def read_lyrx(self, file=None):    
        with open(file, mode="r", encoding="utf-8") as json_file:  
            data = json.load(json_file)
            layerName = self.dlg.layer_select.currentText()
            layer = [layer for layer in QgsProject.instance().mapLayers().values() if layer.name() == layerName][0]
            self.initial_lyrx_parse(data,layer)
        return data


    def getSymbolLayers(self, obj):    
        return obj['symbol']['symbol']['symbolLayers']
    
    
    def getSymbolHalo(self, obj):
        halo = ''
        if 'haloSymbol' in obj['symbol']['symbol']:
            halo = obj['symbol']['symbol']['haloSymbol']
        return halo


    def readValueDef(self, obj):
        return obj['symbol']['symbol']['symbolLayers']


    def checkSymbolType(self, obj):       
        obj_arr = {}
        sl_idx = 0
        count_disabled = 0
        for o in obj:               
            if not 'desc' in obj_arr  :
                obj_arr['desc'] = []
            type = o['type']    
            if  not type in obj_arr  :
                obj_arr[type] = 0
            obj_arr[type] = obj_arr[type] + 1
            o['sl_idx'] = sl_idx
            obj_arr['desc'].append(o)
            if 'enable' in o and not o['enable']:
                count_disabled = count_disabled + 1
                #print('disabled layer')
            sl_idx = sl_idx + 1
        #print(sl_idx)
        obj_arr['layer_count'] = sl_idx - count_disabled
        if 'CIMHatchFill' in obj_arr:
            obj_arr['template'] = 'hatch'
            obj_arr['template_hatch_num'] = obj_arr['CIMHatchFill']        
        else:
            obj_arr['template'] = 'simple'
            
        if 'CIMLineSymbol' in obj_arr:
            obj_arr['template_line_num'] = obj_arr['CIMLineSymbol']        
        if 'CIMSolidFill' in obj_arr:
            obj_arr['template_solid_num'] = obj_arr['CIMSolidFill']
        if 'CIMSolidStroke' in obj_arr:
            obj_arr['template_stroke_num'] = obj_arr['CIMSolidStroke']
        if 'CIMCharacterMarker' in obj_arr:
            obj_arr['template_font_num'] = obj_arr['CIMCharacterMarker']
        
        return obj_arr


    def tweakHaloSymbol(self, layers, haloDef, layer):
        if not haloDef == '':
            #halo_symbol_def = checkSymbolType(haloDef[0])
            new_layer = layers[len(layers) - 1].clone()
            new_layer.setSize(new_layer.size()*1.1)
            symbolHalo = haloDef['symbolLayers']
            halo_symbol_def = self.checkSymbolType(symbolHalo)
            hallo_arr = self.parseSolidFill(halo_symbol_def, layer)            
            newFillSymbol = hallo_arr[0]        
            newStroke = self.parseStroke(halo_symbol_def, newFillSymbol, layer)  
            #for h in symbolHalo:
                #print("halo symbol layer is " + h['type'])
            if newFillSymbol != '':    
                new_layer.setStrokeColor(newFillSymbol.color())
                new_layer.setStrokeWidth(0.5)
            if not newStroke == '':
                #new_layer.setColor(newFillSymbol.color())
                new_layer.setStrokeColor(newStroke[0].color())
            layers.append(new_layer)
        return layers


    def parseSymbolLayerSolidFill(self, layers):
        colors = []
        for l in layers:
            if l['type'] == 'CIMSolidFill':            
                temp_color = l['color']['values']
                new_color = self.colorToRgbArray(temp_color, l['color']['type'])
                colors.append(new_color)
        return colors

    def generalise_geom_type(self, layer):
        geometry_type_str = QgsWkbTypes.displayString(int(layer.wkbType()))
        geometry_type = layer.wkbType()
        geometry_general_type_str = geometry_type_str.replace('Multi', '').lower()  
        geometry_general_type_str = geometry_general_type_str.replace('string', '')
        return geometry_general_type_str

    def parseRasterData(self, obj, layer):
        #print(obj['colorizer'])
        colorizer = obj['colorizer']
        renderer = ''
        if 'Classify' in colorizer['type']:
            print('classify')
            self.parseRasterClassBreaks(colorizer, layer)
            print("after parse rend")
        elif 'Unique' in colorizer['type']:
            print('unique')
            self.parseRasterGroups(colorizer, layer)
            print("after parse")
        
        #return renderer
        #return ''
            
    def parseRasterGroups(self, obj, layer):
        groups = obj['groups']        
        renderer = ''
        col_array = []        
        val_array = []
        rampArray = []
        stats = self.getRasterLayerStats(layer)
        print(stats)
        min= stats.minimumValue
        max = stats.maximumValue
        initMin = False        
        classes = groups[0]['classes']
        
        for gr in classes:            
            color = self.colorToRgbArray(gr['color']['values'], gr['color']['type'])
            label = gr['label']            
            col_array.append(color)
            vals = gr['values'] if 'values' in gr else []
            val_arr = []
            for gr_val in vals:
                val_arr.append(float(gr_val))
                rampArray.append(QgsColorRampShader.ColorRampItem(float(gr_val), color,label ))
        
        try:
            fcn = QgsColorRampShader()            
            fcn.setColorRampType(QgsColorRampShader.Exact)            
            fcn.setColorRampItemList(rampArray)                        
            cRamp = QgsPresetSchemeColorRamp(col_array)            
            fcn.setSourceColorRamp(cRamp)            
            
            shader = QgsRasterShader()
            shader.setRasterShaderFunction(fcn)
            
            renderer = QgsSingleBandPseudoColorRenderer(layer.dataProvider(), layer.type(), shader)                
            layer.setRenderer(renderer)            
            layer.renderer().setClassificationMin(min)
            layer.renderer().setClassificationMax(max)
            layer.renderer().shader().rasterShaderFunction().setColorRampItemList(rampArray)            
            layer.triggerRepaint()
            print("after raster repaint")            
                        
        except Exception as e:                                
            print(e)
                
        
    def parseRasterClassBreaks(self, obj, layer):
        classBreaks = obj['classBreaks']
        #print(classBreaks)
        col_array = []        
        val_array = []
        rampArray = []
        stats = self.getRasterLayerStats(layer)
        min= stats.minimumValue
        max = stats.maximumValue                
        initMin = False
        for cb in classBreaks:
            color = self.colorToRgbArray(cb['color']['values'], cb['color']['type'])
            col_array.append(color)
            val = cb['upperBound'] if 'upperBound' in cb else 0
            val_array.append(val)
            label = cb['label']
            #print(str(val))
            if not initMin:
                rampArray.append(QgsColorRampShader.ColorRampItem(val, color, label))
                initMin = True
            if len(val_array) > 1:    
                rampArray.append(QgsColorRampShader.ColorRampItem(val, color, label))            
        
        try:                                
            
            fcn = QgsColorRampShader()            
            fcn.setColorRampType(QgsColorRampShader.Discrete)            
            fcn.setColorRampItemList(rampArray)                        
            cRamp = QgsPresetSchemeColorRamp(col_array)            
            fcn.setSourceColorRamp(cRamp)            
            
            shader = QgsRasterShader()
            shader.setRasterShaderFunction(fcn)
            
            renderer = QgsSingleBandPseudoColorRenderer(layer.dataProvider(), layer.type(), shader)                
            layer.setRenderer(renderer)            
            layer.renderer().setClassificationMin(min)
            layer.renderer().setClassificationMax(max)
            layer.renderer().shader().rasterShaderFunction().setColorRampItemList(rampArray)            
            layer.triggerRepaint()
            print("after raster repaint")            
                        
        except Exception as e:                                
            print(e)
            
        #return ''

    def getRasterLayerStats(self, layer):
        rend = layer.renderer()
        provider = layer.dataProvider()
        ver = provider.hasStatistics(1, QgsRasterBandStats.All)
        stats = provider.bandStatistics(1, QgsRasterBandStats.All,layer.extent(), 0)
        if ver is not False:
            print("minimumValue = ", stats.minimumValue)
            print("maximumValue = ", stats.maximumValue)
        return(stats)
        
    def parseSolidFill(self, obj, layer):
        symbol = ""
        i = 0
        solid_index = -1
        for ls in obj['desc']:
            if ls['type'] == 'CIMSolidFill' and ls['enable']:
                temp_color = ls['color']['values']
                new_color = self.colorToRgbArray(temp_color, ls['color']['type'])            
                symbol = QgsSymbol.defaultSymbol(layer.geometryType())
                symbol.setColor(new_color)  
                ### TODO add lock
                #print("solid index " + str(ls['sl_idx']))
                #symbol.setStrokeColor(new_color)     
                solid_index = ls['sl_idx'] if 'sl_idx' in ls else 0
                i = i + 1
        if i > 1:
            print("Extra " + str(i) + " solid fills")
        # Add default shape fill.
        if symbol == '' or  self.generalise_geom_type(layer) == 'line':
            symbol = QgsSymbol.defaultSymbol(layer.geometryType())
            new_color = self.colorToRgbArray([255,255,255,0], 'CIMRGBColor')            
            symbol.setColor(new_color)   
                                
        #symbol['order'] = 0
        return [symbol, solid_index]


    def parseLineCap(self, obj):
        lineCap = 1
        #print(obj['capStyle']) 
        if 'capStyle' in obj:        
            lineCap = self.styler.capStyles[obj['capStyle']]
        return lineCap


    def parseLineJoin(self, obj):
        lineJoin = 1
        
        if 'joinStyle' in obj:        
            #print(obj['joinStyle']) 
            lineJoin = self.styler.joinStyles[obj['joinStyle']]
        #print(lineJoin)
        return lineJoin 


    def parseStroke(self, obj, symb, layer):                
        layers = []
        i = 0
        layers_obj = {}
        firstWidth = 0
        firstColor = ''
        geometry_general_type_str = self.generalise_geom_type(layer)
        for ls in obj['desc']:
            firstDash = False
            if ls['type'] == 'CIMSolidStroke' and ls['enable']:
                ## Check dash effects
                dp = self.parseStrokeEffects(ls)            
                new_color = self.colorToRgbArray(ls['color']['values'], ls['color']['type'])            
                stroke_width = ls['width']*self.styler.point2mm                         
                cap = self.parseLineCap(ls)                                
                join = self.parseLineJoin(ls)
                stroke_order = ls['sl_idx'] if 'sl_idx' in ls else 0
                if  i == 0 and  dp == '' and not geometry_general_type_str == 'line':
                    #Change the first symbol layer stroke by layer type            
                    symb.symbolLayer(0).setStrokeColor(new_color)
                    symb.symbolLayer(0).setStrokeWidth(stroke_width)                
                    
                    cleanStrokeSymbol = symbol_layer = QgsSimpleLineSymbolLayer()
                    cleanStrokeSymbol.setColor(new_color)
                    cleanStrokeSymbol.setWidth(stroke_width)
                    firstWidth = stroke_width
                    firstColor = cleanStrokeSymbol.color()                
                    cleanStrokeSymbol.setPenCapStyle(cap)                                        
                    cleanStrokeSymbol.setPenJoinStyle(join)
                    ## Fix stroke offset
                    if not geometry_general_type_str == 'line':
                        cleanStrokeSymbol.setOffset(stroke_width/2)
                    
                    layers_obj[stroke_order] = cleanStrokeSymbol
                else :
                    if (i == 0):
                        firstDash = True
                    # Add simple line symbol layer (stroke)                
                    symbol_layer = QgsSimpleLineSymbolLayer()                
                    symbol_layer.setColor(new_color)
                    symbol_layer.setWidth(stroke_width)
                    if firstWidth < stroke_width:
                        if symbol_layer.color() == firstColor:
                            if 0 in layers_obj:
                                layers_obj[0].setWidth(stroke_width)
                                if not geometry_general_type_str == 'line':
                                    layers_obj[0].setOffset(stroke_width/2)
                                                    
                    symbol_layer.setPenCapStyle(cap)                                        
                    symbol_layer.setPenJoinStyle(join)
                    ## Fix stroke offset
                    if not geometry_general_type_str == 'line':
                        symbol_layer.setOffset(stroke_width/2)
                    # Add dash pattern
                    if not dp == '':
                        #print("dp in " + str(i) + " stroke symbol")
                        symbol_layer.setUseCustomDashPattern(True)
                        symbol_layer.setCustomDashVector(dp)
                    symbol_layer = self.changeColorLock(symbol_layer, ls)    
                    #print("stroke symbol idx is " + str(ls['sl_idx']))                  
                    symb.appendSymbolLayer(symbol_layer)                            
                    layers_obj[stroke_order] = symbol_layer
                i = i + 1            
        return [symb, layers_obj, firstDash]


    def parseStrokeEffects(self, obj):
        dash_pattern = ''
        temp_array = []
        if 'effects' in obj:
            if obj['effects'][0]['type'] == 'CIMGeometricEffectDashes' :
                temp_pattern = obj['effects'][0]['dashTemplate']
                for tp in temp_pattern:
                    temp_array.append(tp*self.styler.point2mm)
                dash_pattern = temp_array
        return dash_pattern


    def parseLineFill(self, obj, layer):    
        isDoubleHatch = False
        isOffsetEqFirstWidth = True 
        symbol = ""
        layers = []
        layers_obj = {}
        i = 0
        first_width = 0
        prev_hatch = 0
        geometry_general_type_str = self.generalise_geom_type(layer)
        for ls in obj['desc']:        
            if ls['type'] == 'CIMHatchFill' and ls['enable']:            
                #print(ls['sl_idx'])
                sd_num = 0
                full_symbol_layer = ''
                for sd in reversed(ls['lineSymbol']['symbolLayers']):
                    #print(sd)
                    symb_def = sd
                    #print("Line symbol sl num is " + str(sd_num) + "From " + str(len(ls['lineSymbol']['symbolLayers'])))
                    ## New definitions
                    angle = ls['rotation'] if 'rotation' in ls else 0            
                    temp_color = symb_def['color']['values']
                    new_color = self.colorToRgbArray(temp_color, symb_def['color']['type'])
                    ## Hatch definitions
                    fill_width = symb_def['width'] if 'width' in symb_def else 1
                    fill_width = fill_width*self.styler.point2mm
                    fill_distance = ls['separation'] if 'separation' in ls else 0
                    fill_distance = fill_distance*self.styler.point2mm
                    if fill_distance <= 0.6 and not fill_distance == 0:
                        # TODO: add user interaction
                        print("QGIS problem with line fill small distances")
                        widthRatio = fill_width/self.styler.point2mm/fill_distance
                        if widthRatio < 1:
                            widthRatio = 1/widthRatio 
                        #print(widthRatio)
                        fill_distance = max(fill_distance*2,0.8)
                        fill_width = fill_width/self.styler.point2mm*widthRatio
                        if fill_width > fill_distance:
                            # TODO: add user interaction
                            print("Fill width error")
                           
                    fill_offset = ls['offsetX'] if 'offsetX' in ls else 0
                    #fill_offset = fill_offset*self.styler.point2mm
                    ## Create symbol and set properties
                    symbol_layer = QgsLinePatternFillSymbolLayer() #if symbol_layer == '' else QgsSimpleLineSymbolLayer()
                    if sd_num == 0:
                        full_symbol_layer = symbol_layer
                    else:
                        symbol_layer = QgsSimpleLineSymbolLayer()    
                        
                    dp = self.parseStrokeEffects(symb_def)
                    
                    symbol_layer.setColor(new_color)
                    if sd_num >= 0:
                        #print("before def")
                        if sd_num == 0:
                            symbol_layer.setLineAngle(angle)
                            symbol_layer.setLineWidth(fill_width)                    
                            symbol_layer.setDistance(fill_distance)                     
                            symbol_layer = self.changeColorLock(symbol_layer, ls)
                        else:
                            #symbol_layer.setAngle(angle)
                            try:
                                # TODO: add user interaction
                                print("Try width")
                                symbol_layer.setWidth(fill_width)                    
                            except:
                                # TODO: add user interaction
                                print("set width error")

                    
                        if not dp == '':
                            #print("Dash pattern Fill is ")
                            #print(dp)
                            symbol_layer.subSymbol().symbolLayer(0).setUseCustomDashPattern(True)
                            symbol_layer.subSymbol().symbolLayer(0).setCustomDashVector(dp)
                            #print(symbol_layer.subSymbol().symbolLayer(0).__class__.__name__)
                        ## Tweak save the first hatch width and use as offset
                        # TODO: Real fix, mark problematic files and unusual offsets
                        if prev_hatch > 0 and sd_num == 0:
                            symbol_layer.setLineWidth(fill_width)
                            symbol_layer.setOffset(fill_width)
                            #isOffsetEqFirstWidth = fill_width == prev_hatch
                            isDoubleHatch = True
                        elif not fill_offset == 0 and not dp == '' :
                            symbol_layer.setOffset(fill_offset)
                    
                        if not sd_num == 0:          
                            try:                                
                                full_symbol_layer.subSymbol().appendSymbolLayer(symbol_layer)
                                
                            except:
                                # TODO: add user interaction
                                print("Failed append subsymbol")
                                print(full_symbol_layer.__class__.__name__)
                                print(full_symbol_layer.subSymbol().__class__.__name__)
                            
                    sd_num = sd_num + 1                                       
                    
                #print(full_symbol_layer.__class__.__name__)
                layers.append(full_symbol_layer)
                if 'sl_idx' in ls:
                    layers_obj[ls['sl_idx']] = full_symbol_layer
                
                if i == 0:
                    prev_hatch = fill_width
                i = i + 1
                    
                    
        if len(layers) > 0:
            return [layers, layers_obj]
        else:
            return symbol


    def cmyk2Rgb(self, cmyk_array):
        c = cmyk_array[0]
        m  = cmyk_array[1]
        y  = cmyk_array[2]
        k  = cmyk_array[3]
        
        r = int((1 - ((c + k)/100)) * 255)
        g = int((1 - ((m + k)/100)) * 255)
        b = int((1 - ((y + k)/100)) * 255)
        
        return [r, g, b]


    def changeColorLock(self, sl, symbol_def):
        color_lock = symbol_def['colorLocked'] if 'colorLocked' in symbol_def else ''    
        if not color_lock == '':
            #print("locked")
            sl.setLocked(True)
        return sl


    def colorToRgbArray(self, color_array, type):
        opacity = 255
        if len(color_array) > 2 and type == 'CIMRGBColor':
            opacity = color_array[3]/100*255
            new_color = QColor.fromRgb(color_array[0],color_array[1], color_array[2], opacity) 
            #print(opacity)
        else:    
            new_color = QColor.fromRgb(color_array[0],color_array[1], color_array[2])        
        if type == 'CIMHSVColor':
            new_color = QColor.fromHsvF(color_array[0]/360,color_array[1]/100, color_array[2]/100,1)
        elif type == 'CIMCMYKColor':
            temp_color = self.cmyk2Rgb(color_array)
            new_color = QColor.fromRgb(temp_color[0],temp_color[1], temp_color[2])
        return new_color


    def parseSimpleRenderer(self, obj, layer):
    
        symbol = ''
        symb_def = obj['symbol']['symbol']['symbolLayers'][0]
        
        if 'characterIndex' in symb_def and symb_def['type'] == 'CIMCharacterMarker':
            symbol_ret = self.parseCharacterFill(symb_def, 0, layer)
            symbol = symbol_ret[0]
        
        if  symb_def['type'] == 'CIMVectorMarker':
            vector_layers = self.parseVectorSymbolLine(symb_def, True, layer)
            #print(vector_layers)
            if not vector_layers == '':
                vl_idx = vector_layers
                for vl in vector_layers:
                    v_symb = vl[0]
                    v_ord = vl[1]
                    #allSymbolLayers[v_ord] = v_symb
                    symbol = v_symb
                    #print("After simple vector")
        print(layer.geometryType())
        if layer.geometryType() == 2:            
            #print(obj['symbol']['symbol']['symbolLayers'])
            #print(symb_def)
            solid_array = self.parseSolidFill({"desc": [symb_def]}, layer)
            #print(solid_array)
            symbol = solid_array[0]
            for sl in obj['symbol']['symbol']['symbolLayers']:                        
                lines_ret = self.parseLineFill({'desc': [sl]} , layer)                
                #print(lines_ret)
                if not lines_ret == '':
                    line_ret = lines_ret[0]
                    print("hatch number is " + str(len(line_ret)))
                    for line in line_ret:
                        try:
                            print("append layer")
                            solid_array[0].appendSymbolLayer(line)
                        except:
                            print(line.__class__.__name__)
            
            stroke = self.parseStroke({"desc": [symb_def], "sl_idx": 0}, solid_array[0], layer)
            
            if(stroke):
                symbol = stroke[0]
                if len(stroke[1]):
                    symbol.appendSymbolLayer(stroke[1][0])
            
        return symbol


    def parseCharacterFill(self, symb_def, max_size, layer):
        #print(symb_def['sl_idx'])
        ret_val = ''
        symbol = QgsFontMarkerSymbolLayer()            
        symbol.setFontFamily(symb_def['fontFamilyName'])
        symbol.setCharacter(chr(symb_def['characterIndex']))
        new_size = symb_def['size']*self.styler.point2mm
        symbol.setSize(symb_def['size']*self.styler.point2mm)
        geometry_general_type_str = self.generalise_geom_type(layer)
        
        if 'rotation' in symb_def:
            new_angle = symb_def['rotation']
            negative_angle = new_angle < 0
            if (new_angle < 0 and new_angle <= -90) or new_angle == -45:
                new_angle = abs(new_angle)
            elif new_angle < 0 and new_angle > -90:
                new_angle = new_angle
                
            if abs(new_angle) > 180:                       
                new_angle = 360 - new_angle
                if negative_angle:
                    new_angle = new_angle*-1
                #print("180 correction to " + str(new_angle))
            symbol.setAngle(new_angle)
            
            # Fix offset - rotation twaek
            #symbol.setOffset(QPointF(0.3,0.0))
            #offset_tweak = (max_size - new_size)/2 if max_size > new_size else 0
            #print(offset_tweak)
            #if offset_tweak > 0:
            #    symbol.setOffset(QPointF(0,0))
        #print(symb_def['characterIndex'])
        # Check fill color     
        if 'symbol' in symb_def :
            if 'symbolLayers' in symb_def['symbol']:
                color = self.parseSymbolLayerSolidFill(symb_def['symbol']['symbolLayers'])
                #print(color)
                symbol.setColor(color[0])
        ## Check offset        
        offset_def = symb_def['anchorPoint'] if 'anchorPoint' in symb_def else ''
        if 'x' in offset_def:
            offsetX = offset_def['x']*self.styler.point2mm
            offsetY = offset_def['y']*self.styler.point2mm 
            symbol.setOffset(QPointF(offsetX,offsetY))
            
        ### TODO Fix offset after rotation
        #print(symbol.markerOffsetWithWidthAndHeight(symbol, 8, 8))
            
        if not geometry_general_type_str == 'point':
            symbol_base = QgsPointPatternFillSymbolLayer()
            if geometry_general_type_str == 'line':
                symbol_base = QgsMarkerLineSymbolLayer()
            ## Change to line symbol when diplacement is along line
            if 'markerPlacement' in symb_def and 'type' in symb_def['markerPlacement']:
                if symb_def['markerPlacement']['type'] == 'CIMMarkerPlacementAlongLineSameSize':
                    symbol_base = QgsMarkerLineSymbolLayer()
            #print("Special fill " + geometry_general_type_str)        
            ## Fill pattern
            if 'markerPlacement' in symb_def and 'stepX' in symb_def['markerPlacement']:
                symbol_base.setDistanceX(symb_def['markerPlacement']['stepX']*self.styler.point2mm)
                symbol_base.setDistanceY(symb_def['markerPlacement']['stepY']*self.styler.point2mm)    
                    
            marker = QgsMarkerSymbol()
            marker.changeSymbolLayer(0, symbol)
            symbol_base.setSubSymbol(marker)                
            ret_val = symbol_base
        else:    
            ret_val = symbol
        ret_val = self.changeColorLock(ret_val, symb_def)
        
        #join = parseLineJoin(symb_def)
        #ret_val.setPenJoinStyle(join)
        sym_ord = symb_def['sl_idx'] if 'sl_idx' in symb_def else -2
        return [ret_val, sym_ord]


    def parseVectorSymbolLine(self, obj, simple, layer):
        #print(obj)
        vector_idx = 0
        vector_symbols = []
        vector_sl_array = []
        symb_idx = -1
        base_symbol = ''
        order = ''
        geometry_general_type_str = self.generalise_geom_type(layer)
        if not 'desc' in obj:
            obj['desc'] = [obj]
        for ls in obj['desc']:        
            if ls['type'] == 'CIMVectorMarker' and ls['enable']: 
                
                order = ls['sl_idx'] if 'sl_idx' in ls else -3
                if 'markerGraphics' in ls:
                    mg = ls['markerGraphics']
                    #print("order is "+ str(ls['sl_idx']))
                    #print(mg)
                    #print("mg len is " + str(len(mg)))
                    #if 'geometry' in mg[0]:
                    #    print(mg)
                    placement = 1
                    markerDistanceX = ''
                    markerDistanceY = ''
                    if 'markerPlacement' in ls and 'placementTemplate' in ls['markerPlacement']:
                        placement = ls['markerPlacement']['placementTemplate'][0]
                        #print("placement " + str(placement))
                        placement = placement*self.styler.point2mm 
                    if 'markerPlacement' in ls and 'stepX' in ls['markerPlacement']:
                        markerDistanceX = ls['markerPlacement']['stepX']*self.styler.point2mm
                        markerDistanceY = ls['markerPlacement']['stepY']*self.styler.point2mm
                            
                    symbol_size = ls['size']*self.styler.point2mm
                        
                    for mgs in mg:
                        #print(mgs)
                        if 'geometry' in mgs and 'x' in mgs['geometry']:
                            #print("geom is xy")
                            mgs_sl = mgs['symbol']['symbolLayers']
                            vector_symbols = []
                            #print(mgs_sl)
                            for sl in mgs_sl:
                                if sl['type'] == 'CIMCharacterMarker':                                
                                    parsed_symb = self.parseCharacterFill(sl, 0, layer) 
                                    if not parsed_symb[0] == '':
                                        symb_type = parsed_symb[0].__class__.__name__
                                        if 'MarkerLine' in symb_type:
                                            parsed_symb[0].setInterval(placement)
                                        else:
                                            if not markerDistanceX == '':
                                                parsed_symb[0].setDistanceX(markerDistanceX)
                                                parsed_symb[0].setDistanceY(markerDistanceY)
                                        vector_symbols.append(parsed_symb[0])
                            if len(vector_symbols) > 1:
                                base_symbol = vector_symbols[0].clone()
                                vs_idx = 0
                                for vs in vector_symbols:
                                    if vs_idx > 0:
                                        subSymbLayer = vs.subSymbol().symbolLayer(0).clone()
                                        origFirstSubSymbLayer = base_symbol.subSymbol().symbolLayer(0).clone()
                                        #print(subSymbLayer)
                                        #print("append more")
                                        base_symbol.subSymbol().appendSymbolLayer(origFirstSubSymbLayer)
                                        base_symbol.subSymbol().changeSymbolLayer(0, subSymbLayer)
                                        #print("Count sub: " + str(base_symbol.subSymbol().symbolLayerCount()))
                                    vs_idx = vs_idx + 1
                                vector_sl_array.append([base_symbol, order])
                            else:
                                #print("append first")
                                vector_sl_array.append([vector_symbols[0], order])
                                
                        else:
                            #print("geom is ")
                            #print(mgs['geometry'])
                            geom = mgs['geometry']
                            ## Finding matching pattern
                            if 'paths' in geom: 
                                for path_obj in self.styler.paths_to_shapes_array:
                                    #print(path_obj)
                                    path_pattern = []
                                    for path_p in geom['paths']:
                                        pair = []
                                        for path_pair in path_p:
                                            #print(path_pair)                                    
                                            new_str = ",".join(map(str, path_pair))                                    
                                            new_str  = re.sub('[1-9]', '3', new_str)
                                            new_str = new_str.split(',')
                                            try:
                                                new_str = [int(i) for i in new_str]
                                            except:
                                                new_str = [float(i) for i in new_str]
                                                #print("no change")
                                            #print(new_str)
                                            pair.append(new_str)                                    
                                                                           
                                        path_pattern.append(pair)
                                    
                                    alt_path_object = {"paths": path_pattern}
                                    #print(alt_path_object)
                                    if self.styler.paths_to_shapes_array[path_obj] == geom or self.styler.paths_to_shapes_array[path_obj] == alt_path_object:
                                        #print("Found geom!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                                        #print(QgsSimpleMarkerSymbolLayerBase.decodeShape(path_obj))
                                        shape_id, isShape = QgsSimpleMarkerSymbolLayerBase.decodeShape(path_obj)
                                        main_sym = QgsMarkerLineSymbolLayer.create()
                                        vect_symb = QgsSimpleMarkerSymbolLayer.create()                                
                                        vect_symb.setShape(shape_id)                                
                                        vect_symb.setSize(symbol_size)                                
                                        #print(vect_symb)
                                        main_sym.subSymbol().changeSymbolLayer(0, vect_symb)
                                        main_sym.setInterval(placement)
                                        vector_sl_array.append([main_sym, order])
                            elif 'curveRings' in geom:                                                    
                                vect_symb = QgsSimpleMarkerSymbolLayer.create()                                                            
                                vect_symb.setSize(symbol_size)                                
                                #print(vect_symb)
                                if not geometry_general_type_str == 'point':
                                    main_sym = QgsMarkerLineSymbolLayer.create()
                                    main_sym.subSymbol().changeSymbolLayer(0, vect_symb)
                                    main_sym.setInterval(placement)
                                    vector_sl_array.append([main_sym, order])
                                else:
                                    vector_sl_array.append([vect_symb, order])
        #print(base_symbol)    
        #if not base_symbol == '':
        #    print(base_symbol.subSymbol().symbolLayerCount())    
        if len(vector_sl_array) == 0:
            vector_sl_array = ''
        else:
            #print(vector_sl_array)                    
            print("vector array length " + str(len(vector_sl_array)))
        return vector_sl_array


    def parsePictureFill(self, obj, appendix):
        pic_idx = 0
        svg_symbol = ''
        symb_idx = -1
        for ls in obj['desc']:        
            if ls['type'] == 'CIMPictureFill' and ls['enable']:   
                #print("Picture url is " + ls["url"])
                url_data = ls['url']
                url_data_array = url_data.split(",")
                plugin_path = os.path.dirname(os.path.realpath(__file__))
                svg_path = plugin_path+"\\img"
                svg_paths = QgsSettings().value('svg/searchPathsForSVG')
                if plugin_path not in svg_paths:
                    QgsSettings().setValue('svg/searchPathsForSVG', svg_paths + [plugin_path, svg_path])
                
                template_f = open(plugin_path+"/img/svg_template.svg")
                template_str = template_f.read()            
                template_str = str(template_str)            
                
                template_str = template_str.replace("image_url", str(url_data))
                        
                f = open(str(pic_idx)+appendix + ".svg","w")
                name = f.name
                #print(name)
                f.write(template_str)
                #print(f)
                template_f.close()
                f.close()
                svg_symbol = QgsSVGFillSymbolLayer.create()
                svg_symbol.setSvgFilePath( name )
                #print(svg_symbol)
                #print(svg_symbol.svgFilePath())
                new_color = self.colorToRgbArray([80,80,80,100], 'CIMRGBColor')     
                svg_symbol.setSvgFillColor(new_color)
                svg_symbol.setSvgStrokeColor(new_color)
                symb_idx = ls['sl_idx']
                pic_idx = pic_idx + 1
                
        return [svg_symbol, symb_idx]
    

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&qlyrx'),
                action)
            self.iface.removeToolBarIcon(action)



    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started

        # show the dialog
        self.dlg.show()
        self.load_vectors()
        self.dlg.saveQmlCheck.stateChanged.connect(self.enableQmlSaving)
        self.dlg.file_select.fileChanged.connect(self.read_lyrx)
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            
            self.j_data = self.read_lyrx(self.dlg.file_select.filePath())
            
            layerName = self.dlg.layer_select.currentText()
            layer = [layer for layer in QgsProject.instance().mapLayers().values() if layer.name() == layerName][0]
            #print(dir(layer))
            #print(layer.__class__.__name__)
            #print(self.styler.point2mm)
            #fields = layer.fields() if layer.fields() else ''
            fields = layer.fields() if "fields" in dir(layer) else ''            
            isRaster = 'Raster' in layer.__class__.__name__ 
            geometry_general_type_str = self.generalise_geom_type(layer) if not isRaster else 'raster'
            
            self.styler.apply_lyrx_symbols(self.dlg, layer, self.j_data, geometry_general_type_str)
            if self.dlg.saveQmlCheck.isChecked():
                self.saveQML(layer)
            self.mb.pushSuccess('Yay',"It's Working")
            #pass
